#ifndef ONYX_KEYBOARD_H_
#define ONYX_KEYBOARD_H_

#include "onyx/data/sketch_point.h"
#include "keyboard_key.h"
#include "tree_view.h"
#include "im_char_selection.h"

namespace sketch
{
class SketchProxy;
};

namespace handwriting
{
class HandwritingWidget;
};

using namespace sketch;

namespace ui
{

///
/// The main interface to the software keyboard.
///
/// To use this class, create an instance and call attachReceiver() to attach
/// the object that should receive QKeyEvent.
///
class KeyBoard : public QFrame
{
    Q_OBJECT
public:
    explicit KeyBoard(QWidget* parent = 0, Qt::WFlags f = 0);
    virtual ~KeyBoard();
    inline void attachReceiver(QObject *r);
    inline QObject * receiver();

    void resetState();

Q_SIGNALS:
    void shifted(bool);
    void capLocked(bool);

public Q_SLOTS:
    void handleButtonClicked(QAbstractButton *button);

private Q_SLOTS:
    void handleStrokeStarted();
    void handlePointAdded(SketchPoint point);
    void handleStrokeAdded(const Points & points);
    void handleFinishCharacterTimeOut();
    void handleTextSelected(const QString & text, int index);
    void handleAutoSelect();
    void handleHandwritingFunctionClicked(const QModelIndex & index);

protected:
    void init();
    void keyReleaseEvent(QKeyEvent *e);
    bool event(QEvent *e);

    void handleCapLockPressed();
    void handleShiftPressed();
    void handleSwitchLanguagePressed();
    void handleHandWriting();

    void updateModifiers();
    void postKeyEvent(QEvent::Type type, uint code);
    QChar getRealChar(uint code);

    void displayAssociatedChars(const QString & current_text);
    bool adjustAssociatedChar(const QString & dst_text, int index);

private:
    uint shift_ : 1;
    uint lock_ : 1;
    uint is_handwriting_ : 1;
    Qt::KeyboardModifiers modifiers_;

    QVBoxLayout * ver_layout_;
    QVector< shared_ptr<QHBoxLayout> > hor_layouts_;
    scoped_ptr<QButtonGroup> button_group_;
    QVector< shared_ptr<KeyBoardKey> > buttons_;

    QObject *receiver_;
    scoped_ptr<sketch::SketchProxy> sketch_proxy_;
    scoped_ptr<handwriting::HandwritingWidget> handwriting_widget_;
    scoped_ptr<ui::OnyxTreeView> handwriting_functions_view_;
    scoped_ptr<InputMethodCharSelection> im_char_selection_;
    QStandardItemModel handwriting_functions_model_;

    QTimer finish_character_timer_;
    QTimer auto_select_timer_;
    QStringList candidates_;
    QString     current_text_;      // current text is used for adjusting the 
};

///
/// Set the receiver of QKeyEvent generated by the keyboard.
///
void KeyBoard::attachReceiver(QObject *r)
{
    receiver_ = r;
}

QObject * KeyBoard::receiver()
{
    return receiver_;
}

}   // namespace ui

#endif      // ONYX_KEYBOARD_H_
